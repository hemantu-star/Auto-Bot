{"ast":null,"code":"var _jsxFileName = \"D:\\\\MINI-PROJECT2\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const handleSend = async () => {\n    if (userInput.trim() === '') return; // Prevent sending empty messages\n\n    // Add user input to messages with sender as 'user'\n    setMessages([...messages, {\n      sender: 'user',\n      text: userInput\n    }]);\n\n    // Make POST request to backend with user's message\n    const response = await fetch('http://localhost:8000/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: userInput\n      })\n    });\n    const data = await response.json();\n\n    // Add the bot's response to the messages\n    setMessages([...messages, {\n      sender: 'bot',\n      text: data.response\n    }]);\n\n    // Clear the user input\n    setUserInput('');\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-display\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-bubble ${msg.sender === 'user' ? 'user-bubble' : 'bot-bubble'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: \"Ask me anything...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"HfxAD2MO2c7ZhY4vijqw2/NvqkQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","userInput","setUserInput","handleSend","trim","sender","text","response","fetch","method","headers","body","JSON","stringify","message","data","json","handleKeyPress","e","key","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/MINI-PROJECT2/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n\r\n  const handleSend = async () => {\r\n    if (userInput.trim() === '') return; // Prevent sending empty messages\r\n\r\n    // Add user input to messages with sender as 'user'\r\n    setMessages([...messages, { sender: 'user', text: userInput }]);\r\n\r\n    // Make POST request to backend with user's message\r\n    const response = await fetch('http://localhost:8000/chat', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message: userInput }),\r\n    });\r\n    const data = await response.json();\r\n\r\n    // Add the bot's response to the messages\r\n    setMessages([...messages, { sender: 'bot', text: data.response }]);\r\n\r\n    // Clear the user input\r\n    setUserInput('');\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-display\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message-bubble ${msg.sender === 'user' ? 'user-bubble' : 'bot-bubble'}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          onKeyDown={handleKeyPress}\r\n          placeholder=\"Ask me anything...\"\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}